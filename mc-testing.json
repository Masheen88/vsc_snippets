{"id":1,"parentId":-1,"label":"snippets","lastId":16,"folder":true,"children":[{"id":6,"parentId":1,"label":"CSS","folder":true,"children":[{"id":14,"parentId":6,"label":"Basic CSS Center","value":"{\r\n  text-align: center;\r\n  float: none;\r\n  margin: 0 auto;\r\n  display: block;\r\n}","children":[],"resolveSyntax":false}]},{"id":7,"parentId":1,"label":"HTML","folder":true,"children":[]},{"id":2,"parentId":1,"label":"JS Snippets","folder":true,"children":[{"id":10,"parentId":2,"label":"api FETCH requests","value":"// NOTE GET request from the API or local json file\ngetComments = async () => {\n  console.log(\"getting comment data from mockapi...\");\n\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT); // url you want get data from\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with getting your comment.\", error);\n  }\n};\n\n// NOTE POST requests from the API or local json file\npostComment = async (commentData) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT, { // url you want to post to\n      method: \"POST\", // type of request\n      headers: {\n        'Content-Type': 'application/json', // type of data sent to the server\n      },\n      body: JSON.stringify({ commentName: commentData }), // data you want to update\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with posting your comment.\", error);\n  }\n};\n\n// NOTE PUT request from the API or local json file\nupdateComment = async (commentData, commentId) => {\n  console.log(\"updating comment\", commentData);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT + `/${commentId}`, { // url + id you want to update\n      method: \"PUT\", // type of request\n      headers: {\n        'Content-Type': 'application/json', // type of data sent to the server\n      },\n      body: JSON.stringify({ commentName: commentData }), // data you want to update\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with updating your comment.\", error);\n  }\n};\n\n// NOTE DELETE request from the API or local json file\ndeleteComment = async (commentId) => {\n  console.log(\"deleting comment\", commentId);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT + `/${commentId}`, { // url + id you want to delete\n      method: \"DELETE\", // type of request\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response; // The DELETE request might not return a JSON response\n  } catch (error) {\n    console.log(\"Oh no! There was an error with deleting your comment.\", error);\n  }\n};\n","children":[],"resolveSyntax":false,"language":".js","description":"api FETCH requests using vanilla javascript","prefix":"mc-FETCH-Requests"},{"id":11,"parentId":2,"label":"api jQuery/AJAX requests","value":"//NOTE GET request from the API or local json file\ngetComments = async () => {\n  console.log(\"getting comment data from mockapi...\");\n\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT, // url you want get data from\n      method: \"GET\",\n      dataType: \"json\", // expected data type of the response from the server\n    });\n    // console.log(\"This is my returned api data:\", data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with getting your comment.\", error);\n  }\n};\n\n//NOTE POST requests from the API or local json file\npostComment = async (commentData) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT, // url you want to post to\n      method: \"POST\", // type of request\n      dataType: \"json\", // expected data type of the response from the server\n      data: JSON.stringify({ commentName: commentData }), // data you want to update\n      contentType: \"application/json\", // type of data sent to the server\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with posting your comment.\", error);\n  }\n};\n\n//NOTE PUT request from the API or local json file\nupdateComment = async (commentData, commentId) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT + `${commentId}`, //url + id you want to update\n      method: \"PUT\", // type of request\n      dataType: \"json\", // expected data type of the response from the server\n      data: JSON.stringify({ commentName: commentData }), // data you want to update\n      contentType: \"application/json\", // type of data sent to the server\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with updating your comment.\", error);\n  }\n};\n\n//NOTE DELETE request from the API or local json file\ndeleteComment = async (commentId) => {\n  console.log(\"deleting comment\", commentId);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT + \"/\" + commentId, // url + id you want to delete\n      method: \"DELETE\", // type of request\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with deleting your comment.\", error);\n  }\n};\n","children":[],"resolveSyntax":false,"language":".js","description":"api jQuery/AJAX requests","prefix":"mc-JQuery-AJAX"},{"id":8,"parentId":2,"label":"lit-html","value":"/* \n   lit-html snippet - Begin\n   Add to the top of your code. Works with html or jsx!\n   Formats html in a template literal  using the lit-html library \n   Syntax: html`<div> html or jsx here! variable </div>`\n*/\n//lit-html snippet - Begin\nlet html = (strings, ...values) => {\n  let str = \"\";\n  strings.forEach((string, i) => {\n    str += string + (values[i] || \"\");\n  });\n  return str;\n};\n//lit-html snippet - End","children":[],"resolveSyntax":false,"language":".js","description":"Converts html/jsx in template literals to it's formatted version.","prefix":"mc-Lit-Html"},{"id":15,"parentId":2,"label":"js loops","value":"/*\r\nfor Loop:\r\nUse this when you know how many times you want to iterate in advance. \r\nIt's the most common loop for iterating over arrays when the index is needed.\r\n*/\r\nconsole.log(\"\\nFor Loop:\");\r\nfor (let index = 0; index < 10; index++) {\r\n  console.log(\"iteration of for loop:\", index);\r\n}\r\n\r\n/*\r\nwhile Loop:\r\nUse this when you want the loop to continue until a certain condition is met, but you don't know in advance how many times you'll need to iterate.\r\n*/\r\nconsole.log(\"\\nWhile Loop:\");\r\nlet whileLoopIndex = 0;\r\nwhile (whileLoopIndex < 10) {\r\n  console.log(\"iiteration of while loop:\", i);\r\n  i++;\r\n}\r\n\r\n/*\r\n//do...while Loop:\r\nSimilar to the while loop, but this loop will always execute at least once, because the condition is checked after the loop body.\r\n*/\r\nconsole.log(\"\\nDo While Loop:\");\r\nlet doWhileLoopIndex = 0;\r\ndo {\r\n  console.log(\"iteration of do while loop:\", doWhileLoopIndex);\r\n  doWhileLoopIndex++;\r\n} while (doWhileLoopIndex < 10);\r\n\r\n/*\r\nfor...in Loop: \r\nUse this to iterate over the properties of an object.\r\nIt's a good choice when you need to work with each property name (key) of an object.\r\n*/\r\nconsole.log(\"\\nFor In Loop:\");\r\nlet objects = { a: 1, b: 2, c: 3 };\r\nfor (let property in obj) {\r\n  console.log(`Each object iteration: obj.${property} = ${objects[property]}`);\r\n}\r\n\r\n/*\r\nfor...of Loop:\r\nUse this for iterating over iterable objects like arrays, strings, NodeLists, etc. \r\nIt's a more modern and concise alternative to the traditional for loop for these types of collections.\r\n*/\r\nconsole.log(\"\\nFor Of Loop:\");\r\nconst array1 = [10, 20, 30];\r\nfor (let number of array1) {\r\n  console.log(\"Each number of array1:\", number);\r\n}\r\n\r\n/*\r\nforEach Method:\r\nThough not a loop in the traditional sense, Array.prototype.forEach() is often used in place of loops for arrays. \r\nIt's ideal when you want to execute a function for each element in an array. It's part of the Array prototype and is more functional in style.\r\n*/\r\nlet array2 = [10, 20, 30];\r\narray2.forEach((value, index) => {\r\n  console.log(\r\n    `Iteration at index: ${index} the number at the index is:`,\r\n    value\r\n  );\r\n});\r\n","language":".js","children":[],"resolveSyntax":false}]},{"id":5,"parentId":1,"label":"Node JS","folder":true,"children":[]},{"id":12,"parentId":1,"label":"React","folder":true,"children":[{"id":13,"parentId":12,"label":"pnpm create react code","value":"pnpm create vite@latest react-test-app -- --template react\n\n//npm create vite@latest react-test-app -- --template react","language":".ps1","children":[],"resolveSyntax":false,"description":"","prefix":""}]}]}