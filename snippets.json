{"id":1,"parentId":-1,"label":"snippets","lastId":12,"folder":true,"children":[{"id":2,"parentId":1,"label":"CSS","folder":true,"children":[]},{"id":3,"parentId":1,"label":"HTML","folder":true,"children":[]},{"id":4,"parentId":1,"label":"JS","folder":true,"children":[{"id":5,"parentId":4,"label":"api FETCH requests","value":"// NOTE GET request from the API or local json file\ngetComments = async () => {\n  console.log(\"getting comment data from mockapi...\");\n\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT); // url you want get data from\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with getting your comment.\", error);\n  }\n};\n\n// NOTE POST requests from the API or local json file\npostComment = async (commentData) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT, { // url you want to post to\n      method: \"POST\", // type of request\n      headers: {\n        'Content-Type': 'application/json', // type of data sent to the server\n      },\n      body: JSON.stringify({ commentName: commentData }), // data you want to update\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with posting your comment.\", error);\n  }\n};\n\n// NOTE PUT request from the API or local json file\nupdateComment = async (commentData, commentId) => {\n  console.log(\"updating comment\", commentData);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT + `/${commentId}`, { // url + id you want to update\n      method: \"PUT\", // type of request\n      headers: {\n        'Content-Type': 'application/json', // type of data sent to the server\n      },\n      body: JSON.stringify({ commentName: commentData }), // data you want to update\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const resp = await response.json(); // parsing the response as JSON\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with updating your comment.\", error);\n  }\n};\n\n// NOTE DELETE request from the API or local json file\ndeleteComment = async (commentId) => {\n  console.log(\"deleting comment\", commentId);\n  try {\n    const response = await fetch(COMMENTS_ENDPOINT + `/${commentId}`, { // url + id you want to delete\n      method: \"DELETE\", // type of request\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response; // The DELETE request might not return a JSON response\n  } catch (error) {\n    console.log(\"Oh no! There was an error with deleting your comment.\", error);\n  }\n};\n","language":".js","children":[],"resolveSyntax":false,"description":"api FETCH requests","prefix":"mc-FETCH"},{"id":6,"parentId":4,"label":"lit-html","value":"/*     lit-html snippet - Begin    Add to the top of your code. Works with html or jsx!    Formats html in a template literal  using the lit-html library     Syntax: html`<div> html or jsx here! variable </div>` */ //lit-html snippet - Begin let html = (strings, ...values) => {   let str = \"\";   strings.forEach((string, i) => {     str += string + (values[i] || \"\");   });   return str; }; //lit-html snippet - End","language":".js","children":[],"resolveSyntax":false,"description":"Converts html/jsx in template literals to it's formatted version.","prefix":"mc-Lit-Html"},{"id":7,"parentId":4,"label":"js loops examples","value":"/* for Loop: Use this when you know how many times you want to iterate in advance.  It's the most common loop for iterating over arrays when the index is needed. */ console.log(\"\\nFor Loop:\"); for (let index = 0; index < 10; index++) {   console.log(\"iteration of for loop:\", index); }  /* while Loop: Use this when you want the loop to continue until a certain condition is met, but you don't know in advance how many times you'll need to iterate. */ console.log(\"\\nWhile Loop:\"); let whileLoopIndex = 0; while (whileLoopIndex < 10) {   console.log(\"iiteration of while loop:\", i);   i++; }  /* //do...while Loop: Similar to the while loop, but this loop will always execute at least once, because the condition is checked after the loop body. */ console.log(\"\\nDo While Loop:\"); let doWhileLoopIndex = 0; do {   console.log(\"iteration of do while loop:\", doWhileLoopIndex);   doWhileLoopIndex++; } while (doWhileLoopIndex < 10);  /* for...in Loop:  Use this to iterate over the properties of an object. It's a good choice when you need to work with each property name (key) of an object. */ console.log(\"\\nFor In Loop:\"); let objects = { a: 1, b: 2, c: 3 }; for (let property in obj) {   console.log(`Each object iteration: obj.${property} = ${objects[property]}`); }  /* for...of Loop: Use this for iterating over iterable objects like arrays, strings, NodeLists, etc.  It's a more modern and concise alternative to the traditional for loop for these types of collections. */ console.log(\"\\nFor Of Loop:\"); const array1 = [10, 20, 30]; for (let number of array1) {   console.log(\"Each number of array1:\", number); }  /* forEach Method: Though not a loop in the traditional sense, Array.prototype.forEach() is often used in place of loops for arrays.  It's ideal when you want to execute a function for each element in an array. It's part of the Array prototype and is more functional in style. */ let array2 = [10, 20, 30]; array2.forEach((value, index) => {   console.log(     `Iteration at index: ${index} the number at the index is:`,     value   ); });","language":".js","children":[],"resolveSyntax":false,"description":"Basic examples of javascript loops including:  \"for loop\",   \"while loop\",   \"do while loop\",   \"for in loop\",   \"for of loop\",   \"forEach method\"","prefix":"mc-Js-Loops-Examples"},{"id":8,"parentId":4,"label":"api jQuery/AJAX requests","value":"//NOTE GET request from the API or local json file\ngetComments = async () => {\n  console.log(\"getting comment data from mockapi...\");\n\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT, // url you want get data from\n      method: \"GET\",\n      dataType: \"json\", // expected data type of the response from the server\n    });\n    // console.log(\"This is my returned api data:\", data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with getting your comment.\", error);\n  }\n};\n\n//NOTE POST requests from the API or local json file\npostComment = async (commentData) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT, // url you want to post to\n      method: \"POST\", // type of request\n      dataType: \"json\", // expected data type of the response from the server\n      data: JSON.stringify({ commentName: commentData }), // data you want to update\n      contentType: \"application/json\", // type of data sent to the server\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with posting your comment.\", error);\n  }\n};\n\n//NOTE PUT request from the API or local json file\nupdateComment = async (commentData, commentId) => {\n  console.log(\"posting comment\", commentData);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT + `${commentId}`, //url + id you want to update\n      method: \"PUT\", // type of request\n      dataType: \"json\", // expected data type of the response from the server\n      data: JSON.stringify({ commentName: commentData }), // data you want to update\n      contentType: \"application/json\", // type of data sent to the server\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with updating your comment.\", error);\n  }\n};\n\n//NOTE DELETE request from the API or local json file\ndeleteComment = async (commentId) => {\n  console.log(\"deleting comment\", commentId);\n  try {\n    const resp = await $.ajax({\n      url: COMMENTS_ENDPOINT + \"/\" + commentId, // url + id you want to delete\n      method: \"DELETE\", // type of request\n    });\n    // console.log(data);\n    return resp;\n  } catch (error) {\n    console.log(\"Oh no! There was an error with deleting your comment.\", error);\n  }\n};\n","language":".js","children":[],"resolveSyntax":false,"description":"api jQuery/AJAX requests","prefix":"mc-JQuery-AJAX"}]},{"id":7,"parentId":1,"label":"package.json","folder":true,"children":[{"id":8,"parentId":7,"label":"Concurrently vite run dev script","value":"\"dev\": \"concurrently \\\"vite\\\" \\\"json-server --watch db.json\\\"\",","children":[],"resolveSyntax":false,"language":".json","description":"Concurrently Vite Run Dev Script","prefix":"mv-ConcurrentlyScriptVite"}]},{"id":9,"parentId":1,"label":"React","folder":true,"children":[{"id":10,"parentId":9,"label":"React Class Component with State","value":"import React from 'react';\n\n\nclass CommentsComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        /*\n        Calls the constructor of the parent class. \n        In this case, the parent class is React.Component. \n        It is a class that we extend to create our own components. \n        We need to call the constructor of the parent class to initialize the state of our component. \n        If we don't call the constructor of the parent class, \n        the state of our component will not be initialized and we will get an error when we try to access the state of our component.\n        */\n        this.state = {\n            comments: [] // This will array hold our comments\n        };\n\n        // Binding the addComment method to this specific instance of the class CommentsComponent\n        this.addComment = this.addComment.bind(this);\n    }\n\n    //As with any class methos can be defined outside the constructor and used later in our code!\n    addComment(comment) {\n      //uses the spread operator to map the previous state of the comments array and adds the new and in turn updating the state\n        this.setState(prevState => ({\n            comments: [...prevState.comments, comment] // Adds new comment to the array\n        }));\n\n        console.log(\"Previous state before updating: \", this.state.comments);\n    }\n\n    //Data in the render() method is re-rendered when the state is updated\n    render() {\nconsole.log(\"Rendering the state\", this.state.comments);\n\n        return (\n            <div>\n                <h2>Comments</h2>\n                <ul>\n                    {this.state.comments.map((comment, index) => (\n                        <li key={index}>{comment}</li> // Display each comment\n                    ))}\n                </ul>\n                {/* This is a masic button to add a comment, image we have a form with various properties! */}\n                <button onClick={() => this.addComment('New Comment')}>Add Comment</button>\n            </div>\n        );\n    }\n}\n\nexport default CommentsComponent;\n","language":".js","children":[],"resolveSyntax":false,"description":"","prefix":"mc-React-Class-Component"},{"id":11,"parentId":9,"label":"Electron","folder":true,"children":[{"id":12,"parentId":11,"label":"Electron Auto Reload on Change","value":"//Install 'electron-reload' as a dev dependency to enable live reloading\n//npm install electron-reload --save-dev\n\nconst electronReload = require('electron-reload');\n\n// Enable Electron-Reload\nelectronReload(__dirname, {\n    electron: require(`${__dirname}/node_modules/electron`),\n});","language":".js","children":[],"resolveSyntax":false,"description":"Allows Electron to automatically reload anytime a change is made for development","prefix":"mc-Electron-Auto-Reload"}]}]}]}